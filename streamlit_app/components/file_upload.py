#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
File upload komponenty pre ICO Collector Streamlit App
"""

import streamlit as st
import pandas as pd
from typing import Optional, Tuple, Dict, Any
from utils.excel_handler import validate_excel_file, load_excel_file, get_sheet_names
from assets.localization import *

def render_advanced_file_uploader():
    """
    Pokroƒçil√Ω file uploader s dodatoƒçn√Ωmi funkciami.
    """
    st.markdown("### üì§ Nahranie Excel s√∫boru")
    
    # Informaƒçn√Ω box o podporovan√Ωch form√°toch
    with st.expander("‚ÑπÔ∏è Podporovan√© form√°ty a po≈æiadavky", expanded=False):
        st.markdown("""
        **Podporovan√© form√°ty:**
        - `.xlsx` (Excel 2007+)
        - `.xls` (Excel 97-2003)
        
        **Po≈æiadavky na s√∫bor:**
        - Maxim√°lna veƒækos≈•: 200 MB
        - Mus√≠ obsahova≈• aspo≈à jeden hark s √∫dajmi
        - Mus√≠ obsahova≈• stƒ∫pec s n√°zvami firiem
        
        **Odpor√∫ƒçania:**
        - N√°zvy firiem by mali by≈• v jednom stƒ∫pci
        - Pr√°zdne riadky bud√∫ ignorovan√©
        - Pre lep≈°ie v√Ωsledky pou≈æ√≠vajte √∫pln√© n√°zvy firiem
        """)
    
    # File uploader s custom ≈°t√Ωlom
    uploaded_file = st.file_uploader(
        label="Vyberte Excel s√∫bor",
        type=['xlsx', 'xls'],
        help="Pretiahnite s√∫bor sem alebo kliknite pre v√Ωber",
        accept_multiple_files=False,
        key="main_file_uploader"
    )
    
    if uploaded_file is not None:
        return process_uploaded_file(uploaded_file)
    
    # Uk√°≈ækov√© d√°ta pre testovanie
    with st.expander("üß™ Vysk√∫≈°ajte s uk√°≈ækov√Ωmi d√°tami", expanded=False):
        st.markdown("""
        Ak nem√°te vlastn√Ω s√∫bor, m√¥≈æete si vytvori≈• uk√°≈ækov√© d√°ta:
        """)
        
        if st.button("üìä Vytvori≈• uk√°≈ækov√© d√°ta"):
            sample_data = create_sample_data()
            return sample_data, "Uk√°≈ækov√© d√°ta", None
    
    return None, None, None

def process_uploaded_file(uploaded_file) -> Tuple[Optional[pd.DataFrame], Optional[str], Optional[str]]:
    """
    Spracuje nahran√Ω s√∫bor a vr√°ti z√°kladn√© inform√°cie.
    """
    # Valid√°cia s√∫boru
    is_valid, error_msg = validate_excel_file(uploaded_file)
    
    if not is_valid:
        st.error(f"‚ùå {error_msg}")
        return None, None, error_msg
    
    # √öspe≈°n√© nahranie
    st.success(f"‚úÖ S√∫bor √∫spe≈°ne nahran√Ω: **{uploaded_file.name}**")
    
    # Z√°kladn√© inform√°cie o s√∫bore
    file_size_mb = uploaded_file.size / (1024 * 1024)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìè Veƒækos≈•", f"{file_size_mb:.2f} MB")
    with col2:
        st.metric("üìÑ Typ", uploaded_file.type.split('/')[-1].upper())
    with col3:
        upload_time = st.empty()
        upload_time.metric("‚è∞ Nahran√Ω", "Teraz")
    
    # Naƒç√≠tanie Excel s√∫boru
    excel_file, error_msg = load_excel_file(uploaded_file)
    if error_msg:
        st.error(f"‚ùå {error_msg}")
        return None, None, error_msg
    
    # Z√≠skanie zoznamu harkov
    sheet_names = get_sheet_names(excel_file)
    
    st.info(f"üìã S√∫bor obsahuje **{len(sheet_names)}** hark(ov): {', '.join(sheet_names)}")
    
    return excel_file, uploaded_file.name, None

def render_file_preview(df: pd.DataFrame, max_rows: int = 10):
    """
    Vykresli n√°hƒæad nahran√©ho s√∫boru.
    """
    if df is None or df.empty:
        st.warning("‚ö†Ô∏è ≈Ωiadne d√°ta na zobrazenie")
        return
    
    st.markdown("### üëÄ N√°hƒæad d√°t")
    
    # Z√°kladn√© info o s√∫bore
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä Riadky", len(df))
    with col2:
        st.metric("üìã Stƒ∫pce", len(df.columns))
    with col3:
        non_empty_cells = df.count().sum()
        total_cells = len(df) * len(df.columns)
        fill_rate = (non_empty_cells / total_cells) * 100 if total_cells > 0 else 0
        st.metric("üìà Naplnenos≈•", f"{fill_rate:.1f}%")
    
    # N√°hƒæad d√°t
    display_df = df.head(max_rows)
    st.dataframe(
        display_df, 
        use_container_width=True,
        hide_index=False
    )
    
    if len(df) > max_rows:
        st.info(f"Zobrazen√Ωch prv√Ωch {max_rows} riadkov z {len(df)} celkovo")
    
    # Inform√°cie o stƒ∫pcoch
    with st.expander("üìã Detail stƒ∫pcov", expanded=False):
        column_info = []
        for col in df.columns:
            non_null_count = df[col].notna().sum()
            null_count = len(df) - non_null_count
            dtype = str(df[col].dtype)
            
            column_info.append({
                'Stƒ∫pec': col,
                'Typ': dtype,
                'Platn√©': non_null_count,
                'Pr√°zdne': null_count,
                'Naplnenos≈• (%)': f"{(non_null_count / len(df)) * 100:.1f}%"
            })
        
        column_df = pd.DataFrame(column_info)
        st.dataframe(column_df, use_container_width=True)

def create_sample_data() -> pd.DataFrame:
    """
    Vytvor√≠ uk√°≈ækov√© d√°ta na testovanie.
    """
    sample_companies = [
        "Orange Slovensko, a.s.",
        "Slovak Telekom, a.s.",
        "Tesco Stores SR, a.s.",
        "Kaufland Slovensk√° republika v.o.s.",
        "Lidl Slovensk√° republika, v.o.s.",
        "COOP Jednota Slovensko",
        "Slovensk√° sporiteƒæ≈àa, a.s.",
        "V≈°eobecn√° zdravotn√° pois≈•ov≈àa, a.s.",
        "Union zdravotn√° pois≈•ov≈àa, a.s.",
        "D√¥vera zdravotn√° pois≈•ov≈àa, a.s.",
        "≈Ωeleznice Slovenskej republiky",
        "Slovensk√Ω plyn√°rensk√Ω priemysel, a.s.",
        "Z√°padoslovensk√° energetika, a.s.",
        "V√Ωchodoslovensk√° energetika, a.s.",
        "Stredoslovensk√° energetika, a.s."
    ]
    
    # Pridanie ƒèal≈°√≠ch stƒ∫pcov pre realistickej≈°ie d√°ta
    sample_data = {
        'Firma': sample_companies,
        'Mesto': [
            'Bratislava', 'Bratislava', 'Trnava', 'Bratislava', 'Nitra',
            'Bratislava', 'Bratislava', 'Bratislava', 'Bratislava', 'Bratislava',
            'Bratislava', 'Bratislava', 'Trenƒç√≠n', 'Ko≈°ice', '≈Ωilina'
        ],
        'Sektor': [
            'Telekomunik√°cie', 'Telekomunik√°cie', 'Maloobchod', 'Maloobchod', 'Maloobchod',
            'Maloobchod', 'Bankovn√≠ctvo', 'Pois≈•ovn√≠ctvo', 'Pois≈•ovn√≠ctvo', 'Pois≈•ovn√≠ctvo',
            'Doprava', 'Energetika', 'Energetika', 'Energetika', 'Energetika'
        ]
    }
    
    df = pd.DataFrame(sample_data)
    
    st.success("‚úÖ Vytvoren√© uk√°≈ækov√© d√°ta s 15 firmami")
    st.info("üí° Tieto d√°ta m√¥≈æete pou≈æi≈• na vysk√∫≈°anie aplik√°cie")
    
    return df

def render_file_validation_results(validation_results: Dict[str, Any]):
    """
    Vykresli v√Ωsledky valid√°cie s√∫boru.
    """
    if not validation_results:
        return
    
    st.markdown("### üõ°Ô∏è V√Ωsledky valid√°cie")
    
    if validation_results.get('is_valid', False):
        st.success("‚úÖ S√∫bor pro≈°iel valid√°ciou")
    else:
        st.error("‚ùå S√∫bor nepre≈°iel valid√°ciou")
    
    # Detailn√© v√Ωsledky
    if validation_results.get('errors'):
        st.error("**Chyby:**")
        for error in validation_results['errors']:
            st.error(f"‚Ä¢ {error}")
    
    if validation_results.get('warnings'):
        st.warning("**Upozornenia:**")
        for warning in validation_results['warnings']:
            st.warning(f"‚Ä¢ {warning}")
    
    if validation_results.get('info'):
        st.info("**Inform√°cie:**")
        for info in validation_results['info']:
            st.info(f"‚Ä¢ {info}")

def render_drag_drop_area():
    """
    Vykresli custom drag & drop oblas≈•.
    """
    # Custom CSS pre drag & drop
    st.markdown("""
    <style>
    .drag-drop-area {
        border: 2px dashed #cccccc;
        border-radius: 10px;
        padding: 40px;
        text-align: center;
        background-color: #fafafa;
        margin: 20px 0;
        transition: all 0.3s ease;
    }
    .drag-drop-area:hover {
        border-color: #1f77b4;
        background-color: #f0f8ff;
    }
    .drag-drop-text {
        font-size: 18px;
        color: #666666;
        margin-bottom: 10px;
    }
    .drag-drop-subtext {
        font-size: 14px;
        color: #999999;
    }
    </style>
    
    <div class="drag-drop-area">
        <div class="drag-drop-text">
            üìÅ Pretiahnite Excel s√∫bor sem
        </div>
        <div class="drag-drop-subtext">
            alebo kliknite ni≈æ≈°ie pre v√Ωber s√∫boru<br>
            Podporovan√© form√°ty: .xlsx, .xls | Max. 200 MB
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_file_upload_tips():
    """
    Zobraz√≠ tipy pre nahr√°vanie s√∫borov.
    """
    with st.expander("üí° Tipy pre lep≈°ie v√Ωsledky", expanded=False):
        st.markdown("""
        **Pre najlep≈°ie v√Ωsledky:**
        
        1. **Kvalitn√© d√°ta**: Pou≈æ√≠vajte presn√© a √∫pln√© n√°zvy firiem
        2. **Form√°tovanie**: Jeden n√°zov firmy na riadok v jednom stƒ∫pci
        3. **ƒåistenie**: Odstr√°≈àte prebytoƒçn√© medzery a znaky
        4. **Konzistentnos≈•**: Pou≈æ√≠vajte konzistentn√© form√°ty n√°zvov
        
        **Vyh√Ωbajte sa:**
        - Zl√∫ƒçen√Ωm bunk√°m
        - Pr√°zdnym riadkom medzi √∫dajmi
        - ≈†peci√°lnym znakom v n√°zvoch stƒ∫pcov
        - Pr√≠li≈° kr√°tkym alebo ne√∫pln√Ωm n√°zvom firiem
        """)

def render_file_statistics(df: pd.DataFrame):
    """
    Vykresli podrobn√© ≈°tatistiky o nahranom s√∫bore.
    """
    if df is None or df.empty:
        return
    
    st.markdown("### üìä ≈†tatistiky s√∫boru")
    
    # Z√°kladn√© metriky
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Riadky", len(df))
    
    with col2:
        st.metric("Stƒ∫pce", len(df.columns))
    
    with col3:
        memory_usage = df.memory_usage(deep=True).sum()
        st.metric("Pam√§≈•", f"{memory_usage / 1024:.1f} KB")
    
    with col4:
        numeric_cols = len(df.select_dtypes(include='number').columns)
        st.metric("ƒå√≠seln√© stƒ∫pce", numeric_cols)
    
    # Graf typov d√°t
    dtype_counts = df.dtypes.value_counts()
    if len(dtype_counts) > 1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Typy d√°t:**")
            for dtype, count in dtype_counts.items():
                st.write(f"‚Ä¢ {dtype}: {count} stƒ∫pcov")
        
        with col2:
            # Graf distrib√∫cie pr√°zdnych hodn√¥t
            null_counts = df.isnull().sum().sort_values(ascending=False)
            if null_counts.max() > 0:
                st.markdown("**Top 5 stƒ∫pcov s pr√°zdnymi hodnotami:**")
                for col, count in null_counts.head().items():
                    if count > 0:
                        percentage = (count / len(df)) * 100
                        st.write(f"‚Ä¢ {col}: {count} ({percentage:.1f}%)")